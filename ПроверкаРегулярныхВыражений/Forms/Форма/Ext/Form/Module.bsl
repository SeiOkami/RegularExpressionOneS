
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДоступныеСпособы();
	
	ЗаполнитьСписокДействий();
	
	ОбновитьТекстТестовойСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстТестовойСтроки(ЭтотОбъект);
	
	ПрименитьРегулярноеВыражениеПриИзмененииПоля();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ТестоваяСтрока", ТестоваяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ТестоваяСтрока = Настройки.Получить("ТестоваяСтрока");
	
	ОбновитьТекстТестовойСтроки(ЭтотОбъект);
	
	ПрименитьРегулярноеВыражениеПриИзмененииПоля();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегулярноеВыражениеПриИзменении(Элемент)
	
	ПрименитьРегулярноеВыражениеПриИзмененииПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестоваяСтрокаПриИзменении(Элемент)
	
	ОбновитьТекстТестовойСтроки(ЭтотОбъект);
	ПрименитьРегулярноеВыражениеПриИзмененииПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаЗаменыПриИзменении(Элемент)
	
	ПрименитьРегулярноеВыражениеПриИзмененииПоля();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРегулярноеВыражениеПриИзмененииПоля()

	Если ЭтотОбъект.ПрименятьПриИзмененииПолей Тогда
		ПрименитьРегулярноеВыражение();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда_ПрименитьРегулярноеВыражение(Команда)
	
	ПрименитьРегулярноеВыражение();
	
КонецПроцедуры
 
&НаКлиенте
Процедура Команда_ВыполнитьЗамеры(Команда)
	ВыполнитьЗамерыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТелеграмКанал(Команда)
	
	ЗапуститьПриложениеАсинх("https://t.me/JuniorOneS");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ЗаполнитьДоступныеСпособы()
	
	СписокСпособов = Элементы.РезультатыЗамеровСпособ.СписокВыбора;
	Для Каждого КлючИЗначение Из ДоступныеСпособы() Цикл
		СписокСпособов.Добавить(КлючИЗначение.Значение, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	СписокДействий = Элементы.ДействиеЗамера.СписокВыбора;
	Для Каждого КлючИЗначение Из ДоступныеДействия() Цикл
		СписокДействий.Добавить(КлючИЗначение.Значение, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область ВыполнитьЗамер

&НаСервере
Процедура ВыполнитьЗамерыНаСервере()
	
	РезультатыЗамеров.Очистить();
	
	ДоступныеСпособы  = ДоступныеСпособы();
	ДоступныеДействия = ДоступныеДействия();
	
	Для ТекущийПодход = 1 По КоличествоПодходов Цикл
		
		Для Каждого ТекущийСпособ Из ДоступныеСпособы Цикл
		
			ТекущиеДанные = РезультатыЗамеров.Добавить();
			ТекущиеДанные.Способ   = ТекущийСпособ.Значение;
			ТекущиеДанные.Подход   = ТекущийПодход;
			ТекущиеДанные.ЧислоРаз = КоличествоЗаПодход;
			
			Если ДействиеЗамера = ДоступныеДействия.Поиск Тогда
				ВыполнитьЗамер_Поиск(ТекущиеДанные);
			ИначеЕсли ДействиеЗамера = ДоступныеДействия.Подобно Тогда
				ВыполнитьЗамер_Подобно(ТекущиеДанные);
			ИначеЕсли ДействиеЗамера = ДоступныеДействия.Замена Тогда
				ВыполнитьЗамер_Замена(ТекущиеДанные);
			Иначе
				ВызватьИсключение "Необходимо выбрать действие!";
			КонецЕсли;
			
			Если ТекущиеДанные.ОбщееВремя > 0 Тогда
				ТекущиеДанные.РазВМилисекунду = Окр(ТекущиеДанные.ЧислоРаз / ТекущиеДанные.ОбщееВремя, 2);
				ТекущиеДанные.СреднееВремя = ТекущиеДанные.ОбщееВремя / ТекущиеДанные.ЧислоРаз;
			Иначе
				ТекущиеДанные.РазВМилисекунду = ТекущиеДанные.ЧислоРаз;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
	ВсеРезультаты = РезультатыЗамеров.Выгрузить(, "Результат");
	ВсеРезультаты.Свернуть("Результат");
	КоличествоРазличных = ВсеРезультаты.Количество();
	Если КоличествоРазличных > 1 Тогда
		НадписьАнализРезультатовЗамера = СтрШаблон("Найдено %1 различных результата!", КоличествоРазличных);
	Иначе
		НадписьАнализРезультатовЗамера = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Поиск(ТекущиеДанные)

	ДоступныеСпособы  = ДоступныеСпособы();
	
	Если ТекущиеДанные.Способ = ДоступныеСпособы.Платформенный Тогда
		ВыполнитьЗамер_Поиск_Платформенный(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.Компонента Тогда
		ВыполнитьЗамер_Поиск_Компонента(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.КомпонентаКэш Тогда
		ВыполнитьЗамер_Поиск_КомпонентаКэш(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Поиск_Платформенный(ТекущиеДанные)

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		РезультатМетода = СтрНайтиВсеПоРегулярномуВыражению(ТестоваяСтрокаТекст, 
			РегулярноеВыражение, ИгнорироватьРегистр, МногострочныйПоиск);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущийРезультат = Новый Массив;
	Для каждого Эл Из РезультатМетода Цикл
		ТекущийРезультат.Добавить(Эл.Значение);
	КонецЦикла;
	
	ТекущиеДанные.Результат = ЗначениеВСтрокуВнутр(ТекущийРезультат);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Поиск_Компонента(ТекущиеДанные)
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента();
		ТекущийРезультат = Компонента.Execute(ТестоваяСтрокаТекст);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	Результат = МассивСтрокИзРезультатаКомпоненты(ТекущийРезультат);
	ТекущиеДанные.Результат = ЗначениеВСтрокуВнутр(Результат);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Поиск_КомпонентаКэш(ТекущиеДанные)

	Компонента = Неопределено;

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента(Компонента);
		ТекущийРезультат = Компонента.Execute(ТестоваяСтрокаТекст);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	Результат = МассивСтрокИзРезультатаКомпоненты(ТекущийРезультат);
	ТекущиеДанные.Результат = ЗначениеВСтрокуВнутр(Результат);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Подобно(ТекущиеДанные)

	ДоступныеСпособы  = ДоступныеСпособы();
	
	Если ТекущиеДанные.Способ = ДоступныеСпособы.Платформенный Тогда
		ВыполнитьЗамер_Подобно_Платформенный(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.Компонента Тогда
		ВыполнитьЗамер_Подобно_Компонента(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.КомпонентаКэш Тогда
		ВыполнитьЗамер_Подобно_КомпонентаКэш(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Подобно_Платформенный(ТекущиеДанные)

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		ТекущийРезультат = СтрПодобнаПоРегулярномуВыражению(ТестоваяСтрокаТекст, 
			РегулярноеВыражение, ИгнорироватьРегистр, МногострочныйПоиск);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Подобно_Компонента(ТекущиеДанные)

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента();
		ТекущийРезультат = Компонента.Test(ТестоваяСтрокаТекст);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Подобно_КомпонентаКэш(ТекущиеДанные)

	Компонента = Неопределено;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента(Компонента);
		ТекущийРезультат = Компонента.Test(ТестоваяСтрокаТекст);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Замена(ТекущиеДанные)

	ДоступныеСпособы  = ДоступныеСпособы();
	
	Если ТекущиеДанные.Способ = ДоступныеСпособы.Платформенный Тогда
		ВыполнитьЗамер_Замена_Платформенный(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.Компонента Тогда
		ВыполнитьЗамер_Замена_Компонента(ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.Способ = ДоступныеСпособы.КомпонентаКэш Тогда
		ВыполнитьЗамер_Замена_КомпонентаКэш(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Замена_Платформенный(ТекущиеДанные)

	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		ТекущийРезультат = СтрЗаменитьПоРегулярномуВыражению(ТестоваяСтрокаТекст, 
			РегулярноеВыражение, СтрокаЗамены, ИгнорироватьРегистр, МногострочныйПоиск);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Замена_Компонента(ТекущиеДанные)
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента();
		ТекущийРезультат = Компонента.Replace(ТестоваяСтрокаТекст, СтрокаЗамены);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗамер_Замена_КомпонентаКэш(ТекущиеДанные)
	
	Компонента = Неопределено;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для ТекущееСоздание = 1 По ТекущиеДанные.ЧислоРаз Цикл
		Компонента = Компонента(Компонента);
		ТекущийРезультат = Компонента.Replace(ТестоваяСтрокаТекст, СтрокаЗамены);
	КонецЦикла;
	
	ТекущиеДанные.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	
	ТекущиеДанные.Результат = ТекущийРезультат;

КонецПроцедуры

&НаСервере
Функция Компонента(Компонента = Неопределено)
	
	Если Компонента = Неопределено Тогда
		Компонента = Новый COMОбъект("VBScript.RegExp");
		Компонента.Pattern = РегулярноеВыражение;
		Компонента.IgnoreCase = ИгнорироватьРегистр;
		Компонента.Global = Истина;
		Компонента.Multiline = МногострочныйПоиск;	
	КонецЕсли;
	
	Возврат Компонента;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивСтрокИзРезультатаКомпоненты(РезультатКомпоненты)
	
	Результат = Новый Массив;
	Для Каждого Элемент Из РезультатКомпоненты Цикл
		Результат.Добавить(Элемент.Value);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрименитьВыражение

&НаСервере
Процедура ПрименитьРегулярноеВыражение()
	
	ОбновитьТекстТестовойСтроки(ЭтотОбъект);

	ПроверяемаяСтрока = ТестоваяСтрокаТекст;
	
	ПрименитьРегулярноеВыражение_Подобно();
	
	ПрименитьРегулярноеВыражение_Замена();
	
	ПрименитьРегулярноеВыражение_Поиск();
		
КонецПроцедуры

&НаСервере
Процедура ПрименитьРегулярноеВыражение_Подобно()
	
	СтрокаПодобна = СтрПодобнаПоРегулярномуВыражению(
		ТестоваяСтрокаТекст, РегулярноеВыражение, 
		ИгнорироватьРегистр, МногострочныйПоиск);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРегулярноеВыражение_Замена()
	
	РезультатЗамены = СтрЗаменитьПоРегулярномуВыражению(
		ТестоваяСтрокаТекст, РегулярноеВыражение, СтрокаЗамены, 
		ИгнорироватьРегистр, МногострочныйПоиск);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРегулярноеВыражение_Поиск()
	
	РезультатыПоиска = СтрНайтиВсеПоРегулярномуВыражению(ТестоваяСтрокаТекст, 
		РегулярноеВыражение, ИгнорироватьРегистр, МногострочныйПоиск);
		
	ЗаполнитьРасшифровкуРезультатаПоиска(РезультатыПоиска);
	
	ВыделитьФорматированиеПоРезультатуПоиска(РезультатыПоиска);
	
КонецПроцедуры
	
&НаСервере
Процедура ВыделитьФорматированиеПоРезультатуПоиска(РезультатыПоиска)
	
	ЦветФонаВыделения = Новый Цвет(40,148,212);
	
	ЧастиСтроки = Новый Массив;
	
	ТекущаяПозиция  = 1;
	
	Для Каждого ЭлементРезультата Из РезультатыПоиска Цикл
		
		СмещениеПозиции = ЭлементРезультата.НачальнаяПозиция - ТекущаяПозиция;
		Если СмещениеПозиции > 0 Тогда
			ВыделитьФорматированиеПоРезультатуПоиска_ДобавитьЧасть(
				ЧастиСтроки, ТекущаяПозиция, СмещениеПозиции);
		КонецЕсли;
		
		Если НЕ ЭлементРезультата.Длина = 0 Тогда
			
			ВыделитьФорматированиеПоРезультатуПоиска_ДобавитьЧасть(
				ЧастиСтроки, ЭлементРезультата.НачальнаяПозиция, ЭлементРезультата.Длина, ЦветФонаВыделения);
						
		КонецЕсли;
		
		ТекущаяПозиция = ЭлементРезультата.НачальнаяПозиция + ЭлементРезультата.Длина;
		
	КонецЦикла;

	ОсталосьРаспределить = СтрДлина(ТестоваяСтрокаТекст) - ТекущаяПозиция;
	Если ОсталосьРаспределить > 0 Тогда
		ВыделитьФорматированиеПоРезультатуПоиска_ДобавитьЧасть(
				ЧастиСтроки, ТекущаяПозиция, ОсталосьРаспределить);
	КонецЕсли;
	
	ТестоваяСтрока.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ЧастиСтроки));
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьФорматированиеПоРезультатуПоиска_ДобавитьЧасть(
	ЧастиСтроки, НачальнаяПозиция, КоличествоСимволов, ВыделитьЦветом = Неопределено)
	
	ТекущийТекст = Сред(ТестоваяСтрокаТекст, НачальнаяПозиция, КоличествоСимволов);
	Если ВыделитьЦветом <> Неопределено Тогда
		ТекущийТекст = Новый ФорматированнаяСтрока(ТекущийТекст,,,ВыделитьЦветом); 
	КонецЕсли;
	
	ЧастиСтроки.Добавить(ТекущийТекст);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуРезультатаПоиска(РезультатыПоиска)
	
	Расшифровка.Очистить();
	
	Для Каждого ЭлементРезультата Из РезультатыПоиска Цикл
		
		ОписаниеРасшифровки = Расшифровка.Добавить();
		ОписаниеРасшифровки.Позиция = ЭлементРезультата.НачальнаяПозиция;
		ОписаниеРасшифровки.Длина = ЭлементРезультата.Длина;
		ОписаниеРасшифровки.Текст = ЭлементРезультата.Значение;		
		
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти

#Область Вспомогательные

&НаСервереБезКонтекста
Функция ДоступныеДействия() Экспорт

	ДоступныеДействия = Новый Структура;
	ДоступныеДействия.Вставить("Поиск", "Поиск");
	ДоступныеДействия.Вставить("Подобно", "Подобно");
	ДоступныеДействия.Вставить("Замена", "Замена");
	
	Возврат ДоступныеДействия;

КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеСпособы() Экспорт

	ДоступныеСпособы = Новый Структура;
	ДоступныеСпособы.Вставить("Платформенный", "Платформенный");
	ДоступныеСпособы.Вставить("Компонента", "Компонента RegExp");
	ДоступныеСпособы.Вставить("КомпонентаКэш", "Компонента RegExp (без учета времени создания)");
		
	Возврат ДоступныеСпособы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстТестовойСтроки(Форма)

	Форма.ТестоваяСтрокаТекст = Форма.ТестоваяСтрока.ПолучитьТекст();

КонецПроцедуры
	
#КонецОбласти

#КонецОбласти  

